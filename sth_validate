#! /bin/bash

# Simple Test Harness (sth)
###########################
# MAIN ROUTINE
#
#   1. sth_validate {directory | pathspec} [ {driver} ]
#      - for each of the {test}.config and {test}.case files in {directory}
#        executes and validates each associated test case.
#      - the optional {driver} overrides the {DRIVER} value defined within {test}.config
#      - a summary of activities is emitted to stdout
#      - a transcription of activities is emitted to stderr
#
# SUPPORTING FUNCTIONS
#   1. sth_case_validate [ {driver} ]
#      - executes a single test case based upon the defined ENV variables
#      - the optional {driver} overrides the {DRIVER} value defined for all test cases
#
#   1. sth_config_reader   {file}
#      - reads a file and generates a set of temporary files, one per test case
#
#   1. sth_strips_comments  {file}
#      - strips comments and blank lines from a given file
#

export STH_TMPDIR=/tmp/STH.$$


function sth_validate () {
  local file_dir="$@"

  local exit_val=
  local count=0
  local passed=0
  local test_case=

  local files=

  for f in ${file_dir} ; do
     [[ -d ${f}  ]]  && files="$files $(echo ${f}/*.config ${f}/*.case)"
     [[ -f ${f}  ]]  && files="$files $f"
  done

  mkdir -p ${STH_TMPDIR}
  for f in ${files} ; do 
    [[ ! -s $f ]] && continue

    rm -rf ${STH_TMPDIR}/*
    sth_config_reader ${f}
       # create individual files  
       #   1. the 'default' file
       #   1. the 'global' file
       #   1. a set of test cases: *.case
    for test_case in ${STH_TMPDIR}/*.case ; do
      source ${STH_TMPDIR}/default
      source ${test_case}
      source ${STH_TMPDIR}/global

      # Overide Environment Variables with STH specific ENV VARABLES
      [[ -n "${STH_DRIVER}"  ]] && DRIVER=${STH_DRIVER}
      [[ -n "${STH_OPTIONS}" ]] && OPTIONS=${STH_OPTIONS}
      [[ -n "${STH_ENTRY}"   ]] && ENTRY=${STH_ENTRY}
      [[ -n "${STH_ARGS}"    ]] && ARGS=${STH_ARGS}
      [[ -n "${STH_INPUT}"   ]] && INPUT=${STH_INPUT}
      [[ -n "${STH_OUTPUT}"  ]] && OUTPUT=${STH_OUTPUT}
      [[ -n "${STH_EXITVAL}" ]] && EXITVAL=${STH_EXITVAL}

      sth_case_validate
      exit_val=$?
      echo

      [[ ${exit_val} == 0 ]] && ((passed ++))
      (( count ++ ))
    done
  done
  rm -fr ${STH_TMPDIR}

  if [[ ${STH_EXECUTE_ONLY} == "TRUE" ]] ; then
    return ${exit_val}
  else
    echo "Summary: ${passed}/${count}  (Passed/Count)"
    return $((  count - passed ))
  fi
}


function sth_case_validate () {
  (   
    local failed=0

    [[ -z ${DRIVER} ]] && DRIVER=${eval} && OPTIONS=""
    [[ -z ${INPUT}  ]] && INPUT=/dev/null
    [[ -z ${OUTPUT} ]] && OUTPUT=/dev/null

    SHOW_INPUT='cat'
    SHOW_OUTPUT='cat'
    [[ ! -f ${INPUT}  ]] && SHOW_INPUT='echo'
    [[ ! -f ${OUTPUT} ]] && SHOW_OUTPUT='echo'

    actual_exit_val=
    actual_output="${STH_TMPDIR}/${DRIVER}.output"      

    if [[ -z ${DRIVER} ]] ; then 
      echo "# Testing: ${DRIVER} ${OPTIONS} ${ENTRY} ${ARGS}"  >$(tty)
      ${SHOW_INPUT} ${INPUT} | eval ${DRIVER} ${OPTIONS} ${ENTRY} ${ARGS} > ${actual_output}
      actual_exit_val="$?"
    else
      echo "# Testing: ${DRIVER} ${OPTIONS} ${ENTRY} ${ARGS}"  >$(tty)
      ${SHOW_INPUT} ${INPUT} | ${ENTRY} ${ARGS} > ${actual_output}
      actual_exit_val="$?"
    fi     

    cat ${actual_output}
    # Provide a transcript of activities
    if [[ ${STH_EXECUTE_ONLY} != "TRUE" ]] ; then 
      # PROCESS stdout
      ${SHOW_OUTPUT} ${OUTPUT} | diff -q - ${actual_output} >/dev/null
      output_error=$?
      if [[  ${output_error} != 0 ]] ; then
        echo "# =========================="
        echo "# Error: Correct Output is:"
        echo "# =========================="
        ${SHOW_OUTPUT}  ${OUTPUT}
        echo "# =========================="
        (( failed ++ ))
      fi

      # Process the EXIT VALUE
      if [[ ${EXITVAL} != ${actual_exit_val} ]] ; then
        echo
        echo "# Expected Exit Value: ${EXITVAL}"
        echo "# Actual   Exit Value: ${actual_exitval}"
        (( failed ++ ))
      fi
    fi >/dev/stderr

    # Now return either the actual_exit_val or the failed count
    if [[ ${STH_EXECUTE_ONLY} == "TRUE" ]] ; then 
      (( actual_exitval == 0 ))
    else
      (( failed == 0 ))
    fi
  )
 }


function sth_config_reader () {
  local config_file=$1

  local count=0
  local output=${STH_TMPDIR}/${count}.case

  cat /dev/null > ${STH_TMPDIR}/default
  cat /dev/null > ${STH_TMPDIR}/global
  while read -r _line ; do
    case "${_line}" in
       \[default\]* ) output=${STH_TMPDIR}/default
                      ;;

       \[global\]*  ) output=${STH_TMPDIR}/global
                      ;;

       \[case\]*    ) ((count ++))
                      output=${STH_TMPDIR}/${count}.case
                      ;; 

       *            ) echo "${_line}" >> ${output}
                      ;;
    esac
  done < <( sth_strip_comments ${config_file} )
}


function sth_strip_comments () {
  cat "$1" | sed -e '/^ *#.*/d' -e '/^ *$/d'
}


sth_validate "$@"



